AWSTemplateFormatVersion: '2010-09-09'
Description: DevVpc Stack

Parameters:
  OpenVpnVpcCidrBlock:
    Type: String
    Default: 10.0.0.0/24 #10.0.0.0 - 10.0.0.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for DevVpc Vpc
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DevVpcCidrBlock:
    Type: String
    Default: 10.1.0.0/16 #10.1.0.0 - 10.1.255.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for DevVpc Vpc
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
 
Resources:

# DevVPCPublicNACL Incoming
  DevVPCPublicNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:  !Ref DevVpc
      Tags:
        - Key: Name
          Value: DevVPCPublicNACL
        - Key: Stack
          Value: !Ref AWS::StackId
          
AWSTemplateFormatVersion: '2010-09-09'
Description: DevVpc Stack

Parameters:
  OpenVpnVpcCidrBlock:
    Type: String
    Default: 10.0.0.0/24 #10.0.0.0 - 10.0.0.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for DevVpc Vpc
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DevVpcCidrBlock:
    Type: String
    Default: 10.1.0.0/16 #10.1.0.0 - 10.1.255.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for DevVpc Vpc
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:

  DevVpcPublicNACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:  !ImportValue DevVpc
      Tags:
        - Key: Name
          Value: DevVpcPublicNACL
        - Key: Stack
          Value: !Ref AWS::StackId
          
# Allows inbound SSH traffic to the subnet from your OpenVPN VPC
  SshInFromOpenVpnVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref OpenVpnVpcCidrBlock
      PortRange:
        From: '22'
        To: '22'      
        
# Allows inbound return traffic from requests originating from your OpenVPN VPC.
  AllInboundFromOpenVpnVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref OpenVpnVpcCidrBlock
      PortRange:
        From: '32768'
        To: '65535'    

# Allows inbound HTTP traffic to the web servers from any IPv4 address.
  80InboundFromOpenAnywhere:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'    

# Allows inbound HTTPS traffic to the web servers from any IPv4 address.
  443InboundFromAnywhere:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'    
        
# Allows inbound return traffic from hosts on the Internet that are responding to requests originating in the subnet..
  AllInboundFromOpenVpnVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'    
        
# Allows all outbound traffic to your OpenVPN VPC.
  AllOutboundToOpenVpnVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: 'true'
      RuleNumber: '100'
      NetworkAclId: !Ref DevVpcPublicNACL
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Ref OpenVpnVpcCidrBlock
      
# Allows outbound HTTP traffic from the subnet to the Internet..
  AllOutbound80ToInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      Egress: 'true'
      RuleNumber: '110'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'    
        
# Allows outbound HTTP traffic from the subnet to the Internet..
  AllOutbound443ToInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      Egress: 'true'
      RuleNumber: '120'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'    

# Allows outbound IPv4 responses to clients on the Internet 
# (for example, serving web pages to people visiting the web servers in the subnet)
  AllOutboundResponseToInternet:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      Egress: 'true'
      RuleNumber: '130'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'    
          
# Allows outbound MS SQL access to database servers in the VPC. 
# Example port only-adjust as required.

  1433OutboundResponseToVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DevVpcPublicNACL
      Egress: 'true'
      RuleNumber: '140'
      Protocol: "6"
      RuleAction: allow
      CidrBlock: !Ref DevVpcCidrBlock
      PortRange:
        From: '1433'
        To: '1433'    
        
  PublicSubnetANetworkNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:  !ImportValue  DevVpcPublicSubnetA
      NetworkAclId: !Ref DevVpcPublicNACL
      
  PublicSubnetBNetworkNaclAssociation: 
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !ImportValue  DevVpcPublicSubnetB
      NetworkAclId: !Ref DevVpcPublicNACL
  
