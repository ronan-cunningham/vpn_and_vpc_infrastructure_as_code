AWSTemplateFormatVersion: '2010-09-09'
Description: OpenVPN Stack

Parameters:
  OpenVPNPort:
    Type: Number
    Default: 1194
    Description: OpenVPN UDP port
  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyImac
    Description: SSH Key for the OpenVPN Instance
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  SourceCidrBlock:
    Type: String
    Default: 86.133.16.132/32 # ** MUST NOT OVERLAP WITH VpcCidrBlock **
    Description: CidrBlock for incoming office connection
  OpenVPNInstanceType:
    Type: String
    Default: t2.micro
    Description: OpenVPN Instance Type    

Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-8c1be5f6" # Amazon Linux AMI 2017.09
    us-east-2:
      "AMALINUX" : "ami-c5062ba0" # Amazon Linux AMI 2017.09
    us-west-1:
      "AMALINUX" : "ami-02eada62" # Amazon Linux AMI 2017.09
    us-west-2:
      "AMALINUX" : "ami-e689729e" # Amazon Linux AMI 2017.09
    ca-central-1:
      "AMALINUX" : "ami-fd55ec99" # Amazon Linux AMI 2017.09
    eu-west-1:
      "AMALINUX" : "ami-acd005d5" # Amazon Linux AMI 2017.09
    eu-central-1:
      "AMALINUX" : "ami-c7ee5ca8" # Amazon Linux AMI 2017.09
    eu-west-2:
      "AMALINUX" : "ami-1a7f6d7e" # Amazon Linux AMI 2017.09
    ap-southeast-1:
      "AMALINUX" : "ami-0797ea64" # Amazon Linux AMI 2017.09
    ap-southeast-2:
      "AMALINUX" : "ami-8536d6e7" # Amazon Linux AMI 2017.09
    ap-northeast-2:
      "AMALINUX" : "ami-9bec36f5" # Amazon Linux AMI 2017.09
    ap-northeast-1:
      "AMALINUX" : "ami-2a69be4c" # Amazon Linux AMI 2017.09
    ap-south-1:
      "AMALINUX" : "ami-4fc58420" # Amazon Linux AMI 2017.09
    sa-east-1:
      "AMALINUX" : "ami-f1344b9d" # Amazon Linux AMI 2017.09

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/22
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: vpnToolsVPC
      - Key: Stack
        Value: !Ref AWS::StackId

  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
         Fn::Select:
           - 0
           - Fn::GetAZs: !Ref AWS::Region
      Tags:
      - Key: Name
        Value: VpnPublicSubnet
      - Key: Stack
        Value: !Ref AWS::StackId

  myInternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
        - Key: Name
          Value: VpnVpcIGW
        - Key: Stack
          Value: !Ref AWS::StackId

  myRouteTablePublic:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref myVPC
        Tags:
        - Key: Name
          Value: VpnVpcPubRouteTable
        - Key: Stack
          Value: !Ref AWS::StackId

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: myInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref myRouteTablePublic

  MyPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref myRouteTablePublic

  myEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  AssociateManagementAccessPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt myEIP.AllocationId
      NetworkInterfaceId: !Ref controlIface

  OpenVPNInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for OpenVPN Server
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: !Ref OpenVPNPort
          ToPort: !Ref OpenVPNPort
          CidrIp: !Ref SourceCidrBlock
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceCidrBlock

  myEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  myAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: allowInstanceActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ec2:AssociateAddress
              - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref myEC2InstanceRole

  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
       - !Ref myEC2InstanceRole

  controlIface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref MyPublicSubnet
      Description: Management Interface
      GroupSet:
      - !Ref OpenVPNInstanceSG
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Management

  myS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  S3VpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref myRouteTablePublic
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref myVPC

  EC2OpenVPNInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref OpenVPNInstanceType
      SourceDestCheck: false
      KeyName: !Ref SSHKeyName
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref controlIface
          DeviceIndex: 0
      IamInstanceProfile: !Ref ec2InstanceProfile
      Tags:
        -
          Key: Name
          Value: OpenVPN Server
      UserData:
          "Fn::Base64":
            !Sub |
              #!/bin/bash
              yum update -y aws-cfn-bootstrap
              yum -y update
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets easyrsa --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2OpenVPNInstance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          easyrsa:
            - "configure_cfn"
            - "install_software"
            - "generate_secrets"
            - "generate_client"
            - "configure_server"
            - "upload_files"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2OpenVPNInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets easyrsa --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_software:
          commands:
            01_install_software_download_easyrsa:
              cwd: "/tmp"
              command: "curl -O http://dl.fedoraproject.org/pub/archive/epel/5/i386/easy-rsa-2.2.2-1.el5.noarch.rpm"
            02_install_software_install_easyrsa:
              cwd: "/tmp"
              command: "yum --nogpgcheck localinstall -y easy-rsa-2.2.2-1.el5.noarch.rpm"
            03_install_software_download_openvpn:
              cwd: "/tmp"
              command: "curl -O https://rpmfind.net/linux/dag/redhat/el6/en/x86_64/dag/RPMS/openvpn-2.2.2-1.el6.rf.x86_64.rpm"
            04_install_software_install_openvpn:
              cwd: "/tmp"
              command: "yum --nogpgcheck localinstall -y openvpn-2.2.2-1.el6.rf.x86_64.rpm"
            05_install_software_copy_easyrsa:
              command: "cp -R /usr/share/easy-rsa/2.0 /opt/easy-rsa"
            
        generate_secrets:
          commands:
            01_generate_secrets_clean_keysdir:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/clean-all"
              command: "source /opt/easy-rsa/vars;/opt/easy-rsa/clean-all"
            02_generate_secrets_update_build-ca:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-ca"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-ca
            03_generate_secrets_run_build-ca:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-ca"
              command: "source /opt/easy-rsa/vars;/opt/easy-rsa/build-ca"
            04_generate_secrets_run_build-dh:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-dh"
              command: "source /opt/easy-rsa/vars;/opt/easy-rsa/build-dh"
            05_generate_secrets_update_build-key-server:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key-server"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-key-server
            06_generate_secrets_run_build-key-server:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key-server"
              command: "source /opt/easy-rsa/vars;/opt/easy-rsa/build-key-server server"
            07_generate_secrets_statictlssecret:
              cwd: "/opt/easy-rsa/keys"
              command: "openvpn --genkey --secret statictlssecret.key"

        generate_client:
          files:
            /opt/easy-rsa/openvpn_client.conf:
              content: !Sub |
                client
                port ${OpenVPNPort}
                dev tun
                proto udp
                tls-client
                remote ${myEIP} ${OpenVPNPort}
                ca ca.crt
                cert clientuser.crt
                key clientuser.key
                tls-auth statictlssecret.key 1
                key-direction 1
                cipher AES-256-CBC
                resolv-retry infinite
                nobind
                persist-key
                persist-tun
                ns-cert-type server
                comp-lzo
                verb 3
              mode: "000700"
              owner: root
              group: root
            /opt/easy-rsa/gen_ovpn_profile.sh:
              content: !Sub |
                (cat /opt/easy-rsa/openvpn_client.conf
                echo '<key>'
                cat keys/clientuser.key
                echo '</key>'
                echo '<cert>'
                cat keys/clientuser.crt
                echo '</cert>'
                echo '<ca>'
                cat keys/ca.crt
                echo '</ca>'
                ) > /opt/easy-rsa/keys/openvpn_clientuser.ovpn
              mode: "000700"
              owner: root
              group: root
          commands:
            01_generate_client_update_build-key:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key"
              command: !Sub |
                sed -i 's/--interact//g' /opt/easy-rsa/build-key
            02_generate_client_run_build-key:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/build-key"
              command: "source /opt/easy-rsa/vars;/opt/easy-rsa/build-key clientuser"
            03_generate_client_generate_ovpn_profile:
              cwd: "/opt/easy-rsa"
              test: "test -e /opt/easy-rsa/gen_ovpn_profile.sh"
              command: "/opt/easy-rsa/gen_ovpn_profile.sh"
        configure_server:
          files:
            /opt/openvpn/server.conf:
              content: !Sub |
                port ${OpenVPNPort}
                mode server
                tls-server
                proto udp
                dev tun
                server 172.16.0.0 255.255.252.0
                ca /opt/easy-rsa/keys/ca.crt
                cert /opt/easy-rsa/keys/server.crt
                key /opt/easy-rsa/keys/server.key
                dh /opt/easy-rsa/keys/dh2048.pem
                push "route 10.0.0.0 255.255.255.0"
                tls-auth /opt/easy-rsa/keys/statictlssecret.key 0
                cipher AES-256-CBC
                ifconfig-pool-persist ipp.txt
                keepalive 10 120
                ping-timer-rem
                comp-lzo
                persist-key
                persist-tun
                status openvpn-status.log
                log-append /var/log/openvpn.log
                verb 3
                max-clients 100
                user nobody
                group nobody
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            01_configure_server_sysctl_ipforward:
              command: !Sub |
                sed -i 's/net.ipv4.ip_forward.=.0/net.ipv4.ip_forward = 1/' /etc/sysctl.conf
            02_configure_server_sysctl_reload:
              command: "sysctl -p"
            03_configure_server_iptables_nat:
              command: "iptables -t nat -A POSTROUTING -s 172.16.0.0/22 -o eth0 -j MASQUERADE"
            04_configure_server_update_config:
              command: "cp -rf /opt/openvpn/server.conf /etc/openvpn/server.conf"
            05_configure_server_openvpn_start:
              command: "service openvpn start"
            06_configure_server_openvpn_startup:
              command: "chkconfig --add openvpn"

        upload_files:
          commands:
            01_upload_files_zipfiles:
                cwd: "/opt/easy-rsa/keys"
                command: "zip openVPNClientFiles.zip ca.crt statictlssecret.key clientuser.key clientuser.crt openvpn_clientuser.ovpn"
            02_upload_files_s3cp_openVPNClientFiles:
              cwd: "/opt/easy-rsa/keys"
              command: !Sub |
                aws s3 cp openVPNClientFiles.zip s3://${myS3Bucket}/client/openVPNClientFiles.zip
            03_upload_files_s3cp_cfn_init_log:
              cwd: "/var/log"
              test: "test -e /var/log/cfn-init.log"
              command: !Sub |
                aws s3 cp /var/log/cfn-init.log s3://${myS3Bucket}/log/genSecrets_cfn-init.log

  EmptyS3BucketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  EmptyS3BucketExecutionPolicy:
    DependsOn:
    - EmptyS3BucketExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EmptyS3BucketLogsRolePolicy
      Roles:
      - Ref: EmptyS3BucketExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:*
          Resource:
          - arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - "*"

  EmptyS3BucketLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - EmptyS3BucketExecutionRole
    - EmptyS3BucketExecutionPolicy
    Properties:
      Timeout: 60
      Handler: index.handler
      Runtime: "nodejs6.10"
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          'use strict';

          exports.handler = (event, context) => {
              console.log(JSON.stringify(event));

              var responseObject = {};
              responseObject.event = event;
              responseObject.context = context;

              if (event.RequestType == "Delete") {
                  console.log("Handle Delete Event");
                  var AWS = require('aws-sdk');
                  var s3Client = new AWS.S3();
                  clearBucket(s3Client, event.ResourceProperties.S3BucketName, responseObject);
              } else {
                  console.log("Handle Create Event");
                  sendResponse(responseObject);
              }
          };

          function sendResponse(responseObject) {
              var cfnResponse = require('cfn-response');
              cfnResponse.send(responseObject.event, responseObject.context, cfnResponse.SUCCESS);
          }

          function deleteBucket(s3Client, bucket, responseObject) {
              s3Client.deleteBucket({
                  Bucket: bucket
              }, function(err, data) {
                  if (err) {
                      console.log(err, err.stack);
                  } else {
                      console.log(data);
                  }
                  sendResponse(responseObject);
              });
          }

          function clearBucket(s3Client, bucket, responseObject) {
              s3Client.listObjects({
                  Bucket: bucket
              }, function(err, data) {
                  if (err) {
                      console.log("error listing bucket objects " + err);
                      return;
                  }
                  var items = data.Contents;
                  for (var i = 0; i < items.length; i += 1) {
                      var deleteParams = {
                          Bucket: bucket,
                          Key: items[i].Key
                      };
                      deleteObject(s3Client, deleteParams);
                  }
              });
              setTimeout(function() {
                  deleteBucket(s3Client, bucket, responseObject);
              }, 10000);
          }

          function deleteObject(s3Client, deleteParams) {
              s3Client.deleteObject(deleteParams, function(err, data) {
                  if (err) {
                      console.log("Error Deleting Object: " + deleteParams.Key);
                  } else {
                    console.log("Deleted Object: " + deleteParams.Key);
                  }
              });
          }
      Role: !GetAtt EmptyS3BucketExecutionRole.Arn

  EmptyS3BucketAction:
    Type: Custom::EmptyS3BucketAction
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketLambda.Arn
      Region: !Ref "AWS::Region"
      S3BucketName: !Ref myS3Bucket

Outputs:
  bucketName:
    Description: UUID for the S3 bucket
    Value: !Ref myS3Bucket
  eip:
    Description: Instance EIP
    Value: !Ref myEIP