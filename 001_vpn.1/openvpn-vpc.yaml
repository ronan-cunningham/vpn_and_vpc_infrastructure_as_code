AWSTemplateFormatVersion: '2010-09-09'
Description: OpenVpn Stack

Parameters:
  OpenVpnPort:
    Type: Number
    Default: 1194
    Description: OpenVpn UDP port
  DevVPcCidrBlock:
    Type: String
    Default: 10.1.0.0/16 #10.1.0.0 - 10.1.255.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for incoming office connection
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SourceCidrBlock:
    Type: String
    Default: 0.0.0.0/0 # ** MUST NOT OVERLAP WITH OpenVpnVpcCidrBlock **
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for incoming office connection
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  OpenVpnVpcCidrBlock:
    Type: String
    Default: 10.0.0.0/24 #10.0.0.0 - 10.0.0.255
    MinLength: '9'
    MaxLength: '18'
    Description: CidrBlock for OpenVpn VPC
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PubSubACidrBlock:
    Type: String
    Default: 10.0.0.0/28 #10.0.0.0 - 10.0.0.15
    Description: CidrBlock for Public Subnet A
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PubSubBCidrBlock:
    Type: String
    Default: 10.0.0.16/28 #10.0.0.16 - 10.0.0.31
    Description: CidrBlock for Public Subnet B
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:

  OpenVpnVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref OpenVpnVpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: vpnToolsVPC
      - Key: Stack
        Value: !Ref AWS::StackId

  OpenVpnVpcPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PubSubACidrBlock
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref OpenVpnVpc
      Tags:
      - Key: Name
        Value: OpenVpnVpcPublicSubnetA
      - Key: Stack
        Value: !Ref AWS::StackId
        
  OpenVpnVpcPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref PubSubBCidrBlock
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref OpenVpnVpc
      Tags:
      - Key: Name
        Value: OpenVpnVpcPublicSubnet
      - Key: Stack
        Value: !Ref AWS::StackId

  OpenVpnInternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
        - Key: Name
          Value: VpnVpcIGW
        - Key: Stack
          Value: !Ref AWS::StackId

  OpenVpnVpcRouteTablePublic:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: !Ref OpenVpnVpc
        Tags:
        - Key: Name
          Value: VpnVpcPubRouteTable
        - Key: Stack
          Value: !Ref AWS::StackId

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref OpenVpnVpc
      InternetGatewayId: !Ref OpenVpnInternetGateway

  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: OpenVpnInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref OpenVpnInternetGateway
      RouteTableId: !Ref OpenVpnVpcRouteTablePublic

  OpenVpnPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref OpenVpnVpcPublicSubnetA
      RouteTableId: !Ref OpenVpnVpcRouteTablePublic
  OpenVpnPublicSubneBtRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref OpenVpnVpcPublicSubnetB
      RouteTableId: !Ref OpenVpnVpcRouteTablePublic


  OpenVpnVpcInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for OpenVpn Server
      GroupName: OpenVpnServerSG
      VpcId: !Ref OpenVpnVpc
      SecurityGroupIngress:
      - IpProtocol: "-1"
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !Ref SourceCidrBlock
      - IpProtocol: "-1"
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !Ref DevVPcCidrBlock
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: "-1"
        CidrIp: !Ref SourceCidrBlock
      Tags:
        - Key: Name
          Value: OpenVpnServerSG
        - Key: Stack
          Value: !Ref AWS::StackId
 
  OpenVpnVpcConfigDownloadBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: open-vpn-config-download
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
  S3VpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref OpenVpnVpcRouteTablePublic
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref OpenVpnVpc

  OpenVpnVpcElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: !Ref OpenVpnVpc
      
  OpenVpnEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OpenVpnEC2InstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  OpenVpnEC2InstanceAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: OpenVpn-instance-access-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ds:CreateComputer
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action:
              - ds:CreateComputer
              - ds:DescribeDirectories
            Effect: Allow
            Resource: "*"
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Effect: Allow
            Resource: "*"
          - Action:
              - ssm:DescribeAssociation
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:GetManifest
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2:AssociateAddress
              - ec2:DescribeInstances
              - ec2:DescribeAddresses
              - ec2:DisassociateAddress
              - ec2:ModifyInstanceAttribute
              - ec2:DescribeInstanceStatus
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref OpenVpnEC2InstanceRole

  OpenVpnEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
       - !Ref OpenVpnEC2InstanceRole
      InstanceProfileName: OpenVpnEC2InstanceProfile

  OpenVpnVpcElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties: 
      FileSystemTags:
        - Key: Name
          Value: OpenVpnElastFileSystem
        - Key: Stack
          Value: !Ref AWS::StackId
          
  EFSMountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref OpenVpnVpc
      GroupDescription: Security group for mount target
      Tags:
        - Key: Name
          Value: EFSMountTargetSecurityGroup
        - Key: Stack
          Value: !Ref AWS::StackId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref OpenVpnVpcCidrBlock
        
  EfsMountTargetOpenVpnPublicSubnetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OpenVpnVpcElasticFileSystem
      SubnetId: !Ref OpenVpnVpcPublicSubnetA
      SecurityGroups: 
       - !Ref EFSMountTargetSecurityGroup
      
  EfsMountTargetOpenVpnPublicSubnetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref OpenVpnVpcElasticFileSystem
      SubnetId: !Ref OpenVpnVpcPublicSubnetB
      SecurityGroups:
       - !Ref EFSMountTargetSecurityGroup
      
  # The role which our Lambda function will assume when it executes
  EmptyS3BucketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  # The policy which will be attached to our Lambda execution role
  # The Lambda function will need access to write output to CloudWatch Logs and full access to S3
  EmptyS3BucketExecutionPolicy:
    DependsOn:
    - EmptyS3BucketExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EmptyS3BucketLogsRolePolicy
      Roles:
      - Ref: EmptyS3BucketExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:*
          Resource:
          - arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:*
          Resource:
          - "*"

  # This lambda function will empty and delete the S3 bucket which was created with our stack
  # The function will be invoked on stack creation, update, and deletion events fired from CloudFormation
  EmptyS3BucketLambda:
    Type: AWS::Lambda::Function
    DependsOn:
    - EmptyS3BucketExecutionRole
    - EmptyS3BucketExecutionPolicy
    Properties:
      Timeout: 60
      Handler: index.handler
      Runtime: "nodejs6.10"
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          'use strict';
          exports.handler = (event, context) => {
              console.log(JSON.stringify(event));
              var responseObject = {};
              responseObject.event = event;
              responseObject.context = context;
              if (event.RequestType == "Delete") {
                  console.log("Handle Delete Event");
                  var AWS = require('aws-sdk');
                  var s3Client = new AWS.S3();
                  clearBucket(s3Client, event.ResourceProperties.S3BucketName, responseObject);
              } else {
                  console.log("Handle Create Event");
                  sendResponse(responseObject);
              }
          };
          function sendResponse(responseObject) {
              var cfnResponse = require('cfn-response');
              cfnResponse.send(responseObject.event, responseObject.context, cfnResponse.SUCCESS);
          }
          function deleteBucket(s3Client, bucket, responseObject) {
              s3Client.deleteBucket({
                  Bucket: bucket
              }, function(err, data) {
                  if (err) {
                      console.log(err, err.stack);
                  } else {
                      console.log(data);
                  }
                  sendResponse(responseObject);
              });
          }
          function clearBucket(s3Client, bucket, responseObject) {
              s3Client.listObjects({
                  Bucket: bucket
              }, function(err, data) {
                  if (err) {
                      console.log("error listing bucket objects " + err);
                      return;
                  }
                  var items = data.Contents;
                  for (var i = 0; i < items.length; i += 1) {
                      var deleteParams = {
                          Bucket: bucket,
                          Key: items[i].Key
                      };
                      deleteObject(s3Client, deleteParams);
                  }
              });
              setTimeout(function() {
                  deleteBucket(s3Client, bucket, responseObject);
              }, 10000);
          }
          function deleteObject(s3Client, deleteParams) {
              s3Client.deleteObject(deleteParams, function(err, data) {
                  if (err) {
                      console.log("Error Deleting Object: " + deleteParams.Key);
                  } else {
                    console.log("Deleted Object: " + deleteParams.Key);
                  }
              });
          }
      Role: !GetAtt EmptyS3BucketExecutionRole.Arn

  # Custom resource for the EmptyS3BucketLambda lambda function
  # CloudFormation will wait for the associated lambda function to signal back with cfn-response
  EmptyS3BucketAction:
    Type: Custom::EmptyS3BucketAction
    Properties:
      ServiceToken: !GetAtt EmptyS3BucketLambda.Arn
      Region: !Ref "AWS::Region"
      S3BucketName: !Ref OpenVpnVpcConfigDownloadBucket
      
      
Outputs:
  OpenVpnVpc:
    Description: Open VPN Vpc
    Value: !Ref OpenVpnVpc
    Export:
      Name: !Sub "OpenVpnVpc"
  OpenVpnVpcPublicSubnetA:
    Description: Open VPN Public Subnet A
    Value: !Ref OpenVpnVpcPublicSubnetA
    Export:
      Name: "OpenVpnVpcPublicSubnetA"
  OpenVpnVpcPublicSubnetB:
    Description: Open VPN Public Subnet B
    Value: !Ref OpenVpnVpcPublicSubnetB
    Export:
      Name: "OpenVpnVpcPublicSubnetB"
  OpenVpnVpcInstanceSG:
    Description: Open VPN Instance Security Group
    Value: !Ref OpenVpnVpcInstanceSG
    Export:
      Name: "OpenVpnVpcInstanceSG"
  OpenVpnVpcConfigDownloadBucket:
    Description: Open Vpn Config Download Bucket
    Value: !Ref OpenVpnVpcConfigDownloadBucket
    Export:
      Name: "OpenVpnVpcConfigDownloadBucket"
  OpenVpnVpcElasticIP:
    Description: Open Vpn Vpc Elastic IP
    Value: !Ref OpenVpnVpcElasticIP
    Export:
      Name: "OpenVpnVpcElasticIP"
  OpenVpnVpcElasticIPAllocationId:
    Description: Open Vpn Vpc Elastic IP Allocation ID
    Value: !GetAtt OpenVpnVpcElasticIP.AllocationId
    Export:
      Name: "OpenVpnVpcElasticIPAllocationId"
  OpenVpnEC2InstanceProfile:
    Description: Open Vpn EC2 Instance Profile
    Value: !Ref OpenVpnEC2InstanceProfile
    Export:
      Name: "OpenVpnEC2InstanceProfile"
  OpenVpnVpcEC2InstanceRoleArn:
    Description: Open Vpn EC2 Instance Role
    Value: !GetAtt OpenVpnEC2InstanceRole.Arn
    Export:
      Name: "OpenVpnVpcEC2InstanceRoleArn"
  OpenVpnVpcRouteTablePublic:
    Description: Open Vpn Vpc Route Table
    Value: !Ref OpenVpnVpcRouteTablePublic
    Export:
      Name: "OpenVpnVpcRouteTablePublic"
  OpenVpnVpcEFS:
    Description: Open Vpn Vpc Elastic File System
    Value: !Ref OpenVpnVpcElasticFileSystem
    Export:
      Name: "OpenVpnVpcEFS"  